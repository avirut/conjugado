"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractComponentData = exports.flattenText = exports.isTagType = exports.attributeValue = exports.hasAttribute = void 0;
const himalaya_1 = require("himalaya");
function hasAttribute(tag, key, value) {
    if (!tag.attributes || !tag.attributes.length) {
        return false;
    }
    return tag.attributes.find((attr) => {
        if (attr.key !== key) {
            return false;
        }
        if (value && attr.value !== value) {
            return false;
        }
        return true;
    }) !== undefined;
}
exports.hasAttribute = hasAttribute;
function attributeValue(tag, key) {
    const attribute = tag.attributes.find((attr) => attr.key === key);
    if (!attribute) {
        throw new Error(`Couldn't find the attribute ${key}`);
    }
    return attribute.value;
}
exports.attributeValue = attributeValue;
function isTagType(tag, type, name) {
    if (tag.type !== type) {
        return false;
    }
    if (name && tag.tagName !== name) {
        return false;
    }
    return true;
}
exports.isTagType = isTagType;
function flattenText(children) {
    let text = "";
    for (const child of children) {
        if (child.type === 'text') {
            text += child.content;
        }
        else if (child.children) {
            text += flattenText(child.children);
        }
    }
    return text;
}
exports.flattenText = flattenText;
function extractComponentData(htmlString) {
    const html = (0, himalaya_1.parse)(htmlString).find((element) => isTagType(element, 'element', 'html'));
    const body = html.children.find((element) => isTagType(element, 'element', 'body'));
    if (!body) {
        throw new Error('Cannot find the body tag. SpanishDict API might have changed');
    }
    const dataComponentFindFn = (element) => {
        var _a, _b;
        for (const child of (_a = element.children) !== null && _a !== void 0 ? _a : []) {
            if (isTagType(child, 'element', 'script') && ((_b = child.children) === null || _b === void 0 ? void 0 : _b.length)) {
                const grandResult = dataComponentFindFn(child);
                if (grandResult) { // find it
                    return grandResult;
                }
            }
            if (child.type === 'text' && child.content.includes('SD_COMPONENT_DATA')) {
                return child;
            }
        }
    };
    const resultTag = dataComponentFindFn(body);
    if (!resultTag) {
        throw new Error('Cannot find the tag with results. SpanishDict API might have changed');
    }
    const resultsLine = resultTag.content.split('\n').find((line) => line.includes('SD_COMPONENT_DATA'));
    return JSON.parse(resultsLine.substring(resultsLine.indexOf('=') + 1, resultsLine.length - 1));
}
exports.extractComponentData = extractComponentData;
