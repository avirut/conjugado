"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("./constants");
const util_1 = require("./util");
function convertGender(gender) {
    if (gender === 'M') {
        return constants_1.Gender.Masculine;
    }
    if (gender === 'F') {
        return constants_1.Gender.Femeline;
    }
    return constants_1.Gender.Neutral;
}
function convertExample(example, lang) {
    const originalKey = (lang === constants_1.Language.Spanish ? "textEs" : "textEn");
    const translatedKey = (lang === constants_1.Language.Spanish ? "textEn" : "textEs");
    return {
        original: example[originalKey],
        translated: example[translatedKey]
    };
}
function convertSense(sense, lang) {
    return sense.translations.map((translation) => {
        var _a;
        return ({
            word: sense.subheadword,
            lang: lang,
            gender: sense.gender ? convertGender(sense.gender) : undefined,
            context: sense.context + (((_a = translation.contextEn) === null || _a === void 0 ? void 0 : _a.length) ? `, ${translation.contextEn}` : ''),
            meaning: translation.translation,
            part: sense.partOfSpeech.nameEn,
            examples: translation.examples.map((eg) => convertExample(eg, lang)),
            regions: sense.regions.concat(translation.regions).map((region) => region.nameEn)
        });
    });
}
function extract(html) {
    var _a;
    const resultsProps = (0, util_1.extractComponentData)(html).sdDictionaryResultsProps;
    const neodict = (_a = resultsProps === null || resultsProps === void 0 ? void 0 : resultsProps.entry) === null || _a === void 0 ? void 0 : _a.neodict;
    if (!(neodict === null || neodict === void 0 ? void 0 : neodict.length)) {
        throw new Error('Cannot find neodict. SpanishDict API might have changed');
    }
    return neodict
        .map((nd) => nd.posGroups).reduce((acc, val) => acc.concat(val), [])
        .map((posGroup) => posGroup.senses).reduce((acc, val) => acc.concat(val), [])
        .reduce((acc, val) => acc.concat(convertSense(val, resultsProps.entryLang)), []);
}
exports.default = extract;
