"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("./constants");
const util_1 = require("./util");
/**
 * The same has happened to the tenses. Tense is used in their data structure for both
 * simple tenses and compound tenses. It also has the infomration of mood.
 * From SpanishDict, the tenses of the verb are a bit mixed up. For example,
 *
 *   presentIndicative = Present, Indicative
 *   preteritIndicative = Preterite, Indicative
 *   imperfectIndicative = Imperfect, Indicative
 *   conditionalIndicative = Conditional, Indicative
 *   presentSubjunctive = Present, Subjunctive
 *   imperfectSubjuncitve = Imperfect, Subjunctive
 *   imperfectSubjunctive2 = Imperfect2, Subjunctive
 *   futureSubjunctive = Future, Subjunctive
 *   imperative = Affirmative, Imperative
 *   negativeImperative = Negative, Imperative
 *   presentContinuous = Present, Continuous / Progressive (Compound)
 *   preteritContinuous = Preterite, Continuous / Progressive (Compound)
 *   imperfectContinuous = Imperfect, Continuous / Progressive (Compound)
 *   conditionalContinuous = Conditional, Continuous / Progressive (Compound)
 *   futureContinuous = Future, Continuous / Progressive (Compound)
 *   presentPerfect = Present, Perfect (compound tense)
 *   preteritPerfect = Preterite, Perfect (compound tense)
 *   pastPerfect = Past, Perfect (compound tense)
 *   conditionalPerfect = Conditional, Perfect (compound tense)
 *   futurePerfect = Future, Perfect (compound tense)
 *   presentPerfectSubjunctive = Present, Perfect Subjunctive (compound tense)
 *   pastPerfectSubjunctive = Past, Perfect Subjunctive (compound tense)
 *   futurePerfectSubjunctive = Future, Perfect Subjunctive (compound tense)
 */
function convertPronounToPerson(person) {
    if (person === 'yo' || person === 'nosotros') {
        return constants_1.Person.First;
    }
    if (person === 'tú' || person === 'vosotros') {
        return constants_1.Person.Second;
    }
    const thirdPersons = ['él', 'ella', 'Ud.', 'ellos', 'ellas', 'Uds.'];
    if (thirdPersons.some(p => person.includes(p))) {
        return constants_1.Person.Third;
    }
}
function convertPronounToNumber(person) {
    const singulars = ['yo', 'tú', 'él', 'ella', 'Ud.'];
    const plurals = ['nosotros', 'vosotros', 'ellos', 'ellas', 'Uds.'];
    if (singulars.some(singular => person.includes(singular))) {
        return constants_1.CNumber.Singular;
    }
    if (plurals.some(plural => person.includes(plural))) {
        return constants_1.CNumber.Plural;
    }
}
function convertParadigmToTense(tense) {
    const match = /[A-Z][^\d]*/.exec(tense);
    if (match) {
        tense = tense.substring(0, match.index) + tense.substring(match.index + match[0].length);
    }
    switch (tense) {
        case 'present':
            return constants_1.Tense.Present;
        case 'preterit':
            return constants_1.Tense.Preterite;
        case 'imperfect':
            return constants_1.Tense.Imperfect;
        case 'imperfect2':
            return constants_1.Tense.Imperfect2;
        case 'future':
            return constants_1.Tense.Future;
        case 'imperative':
            return constants_1.Tense.Affirmative;
        case 'negative':
            return constants_1.Tense.Negative;
        case 'conditional':
            return constants_1.Tense.Conditional;
        case 'past':
            return constants_1.Tense.Past;
    }
    throw new Error(`Unknown tense ${tense}`);
}
function convertParadigmToMood(tense) {
    const lcTense = tense.toLowerCase();
    if (lcTense.includes('indicative')) {
        return constants_1.Mood.Indicative;
    }
    if (lcTense.includes('subjunctive')) {
        return constants_1.Mood.Subjunctive;
    }
    if (lcTense.includes('imperative')) {
        return constants_1.Mood.Imperative;
    }
    return constants_1.Mood.Indicative;
}
function convertParadigmToForm(tense) {
    if (tense.includes('Continuous')) {
        return constants_1.Form.Progressive;
    }
    if (tense.includes('Perfect')) {
        return constants_1.Form.Perfect;
    }
    return constants_1.Form.Simple;
}
function convertParadigmToConjugationResults(paradigm, data) {
    return data.map((item) => ({
        pronoun: item.pronoun,
        person: convertPronounToPerson(item.pronoun),
        number: convertPronounToNumber(item.pronoun),
        tense: convertParadigmToTense(paradigm),
        mood: convertParadigmToMood(paradigm),
        form: convertParadigmToForm(paradigm),
        paradigm: paradigm,
        word: item.word
    }));
}
function extract(html) {
    var _a;
    const componentData = (0, util_1.extractComponentData)(html);
    if (!componentData.altLangUrl.includes('/verbos/')) {
        throw new Error('No conjugation found. Maybe it was not a verb?');
    }
    const paradigms = (_a = componentData.verb) === null || _a === void 0 ? void 0 : _a.paradigms;
    if (!paradigms) {
        throw new Error('Couldn\'t find paradigms in the component data. SpanishDict API might have changed');
    }
    let results = [];
    for (const paradigm in paradigms) {
        results = results.concat(convertParadigmToConjugationResults(paradigm, paradigms[paradigm]));
    }
    return results;
}
exports.default = extract;
