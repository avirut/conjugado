/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var Gender;
(function (Gender) {
    Gender["Masculine"] = "m";
    Gender["Femeline"] = "f";
    Gender["Neutral"] = "n";
})(Gender || (Gender = {}));
var Language;
(function (Language) {
    Language["English"] = "en";
    Language["Spanish"] = "es";
})(Language || (Language = {}));
var Person;
(function (Person) {
    Person["First"] = "1st";
    Person["Second"] = "2nd";
    Person["Third"] = "3rd";
})(Person || (Person = {}));
var CNumber;
(function (CNumber) {
    CNumber["Singular"] = "sig";
    CNumber["Plural"] = "plr";
})(CNumber || (CNumber = {}));
var Tense;
(function (Tense) {
    Tense["Present"] = "present";
    Tense["Preterite"] = "preterite";
    Tense["Imperfect"] = "imperfect";
    Tense["Conditional"] = "conditional";
    Tense["Imperfect2"] = "imperfect2";
    Tense["Future"] = "future";
    Tense["Affirmative"] = "affirmative";
    Tense["Negative"] = "negative";
    Tense["Past"] = "past";
})(Tense || (Tense = {}));
var Mood;
(function (Mood) {
    Mood["Indicative"] = "ind";
    Mood["Subjunctive"] = "sub";
    Mood["Imperative"] = "imp";
})(Mood || (Mood = {}));
// Not a linguist, just trying to separate them in the program
var Form;
(function (Form) {
    Form["Simple"] = "simp";
    Form["Progressive"] = "prog";
    Form["Perfect"] = "perf";
})(Form || (Form = {}));

function unwrapExports (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var compat = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startsWith = startsWith;
exports.endsWith = endsWith;
exports.stringIncludes = stringIncludes;
exports.isRealNaN = isRealNaN;
exports.arrayIncludes = arrayIncludes;
/*
  We don't want to include babel-polyfill in our project.
    - Library authors should be using babel-runtime for non-global polyfilling
    - Adding babel-polyfill/-runtime increases bundle size significantly

  We will include our polyfill instance methods as regular functions.
*/

function startsWith(str, searchString, position) {
  return str.substr(position || 0, searchString.length) === searchString;
}

function endsWith(str, searchString, position) {
  var index = (position || str.length) - searchString.length;
  var lastIndex = str.lastIndexOf(searchString, index);
  return lastIndex !== -1 && lastIndex === index;
}

function stringIncludes(str, searchString, position) {
  return str.indexOf(searchString, position || 0) !== -1;
}

function isRealNaN(x) {
  return typeof x === 'number' && isNaN(x);
}

function arrayIncludes(array, searchElement, position) {
  var len = array.length;
  if (len === 0) return false;

  var lookupIndex = position | 0;
  var isNaNElement = isRealNaN(searchElement);
  var searchIndex = lookupIndex >= 0 ? lookupIndex : len + lookupIndex;
  while (searchIndex < len) {
    var element = array[searchIndex++];
    if (element === searchElement) return true;
    if (isNaNElement && isRealNaN(element)) return true;
  }

  return false;
}

});

unwrapExports(compat);
compat.startsWith;
compat.endsWith;
compat.stringIncludes;
compat.isRealNaN;
compat.arrayIncludes;

var lexer_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.feedPosition = feedPosition;
exports.jumpPosition = jumpPosition;
exports.makeInitialPosition = makeInitialPosition;
exports.copyPosition = copyPosition;
exports.default = lexer;
exports.lex = lex;
exports.findTextEnd = findTextEnd;
exports.lexText = lexText;
exports.lexComment = lexComment;
exports.lexTag = lexTag;
exports.isWhitespaceChar = isWhitespaceChar;
exports.lexTagName = lexTagName;
exports.lexTagAttributes = lexTagAttributes;
exports.lexSkipTag = lexSkipTag;



function feedPosition(position, str, len) {
  var start = position.index;
  var end = position.index = start + len;
  for (var i = start; i < end; i++) {
    var char = str.charAt(i);
    if (char === '\n') {
      position.line++;
      position.column = 0;
    } else {
      position.column++;
    }
  }
}

function jumpPosition(position, str, end) {
  var len = end - position.index;
  return feedPosition(position, str, len);
}

function makeInitialPosition() {
  return {
    index: 0,
    column: 0,
    line: 0
  };
}

function copyPosition(position) {
  return {
    index: position.index,
    line: position.line,
    column: position.column
  };
}

function lexer(str, options) {
  var state = {
    str: str,
    options: options,
    position: makeInitialPosition(),
    tokens: []
  };
  lex(state);
  return state.tokens;
}

function lex(state) {
  var str = state.str,
      childlessTags = state.options.childlessTags;

  var len = str.length;
  while (state.position.index < len) {
    var start = state.position.index;
    lexText(state);
    if (state.position.index === start) {
      var isComment = (0, compat.startsWith)(str, '!--', start + 1);
      if (isComment) {
        lexComment(state);
      } else {
        var tagName = lexTag(state);
        var safeTag = tagName.toLowerCase();
        if ((0, compat.arrayIncludes)(childlessTags, safeTag)) {
          lexSkipTag(tagName, state);
        }
      }
    }
  }
}

var alphanumeric = /[A-Za-z0-9]/;
function findTextEnd(str, index) {
  while (true) {
    var textEnd = str.indexOf('<', index);
    if (textEnd === -1) {
      return textEnd;
    }
    var char = str.charAt(textEnd + 1);
    if (char === '/' || char === '!' || alphanumeric.test(char)) {
      return textEnd;
    }
    index = textEnd + 1;
  }
}

function lexText(state) {
  var type = 'text';
  var str = state.str,
      position = state.position;

  var textEnd = findTextEnd(str, position.index);
  if (textEnd === position.index) return;
  if (textEnd === -1) {
    textEnd = str.length;
  }

  var start = copyPosition(position);
  var content = str.slice(position.index, textEnd);
  jumpPosition(position, str, textEnd);
  var end = copyPosition(position);
  state.tokens.push({ type: type, content: content, position: { start: start, end: end } });
}

function lexComment(state) {
  var str = state.str,
      position = state.position;

  var start = copyPosition(position);
  feedPosition(position, str, 4); // "<!--".length
  var contentEnd = str.indexOf('-->', position.index);
  var commentEnd = contentEnd + 3; // "-->".length
  if (contentEnd === -1) {
    contentEnd = commentEnd = str.length;
  }

  var content = str.slice(position.index, contentEnd);
  jumpPosition(position, str, commentEnd);
  state.tokens.push({
    type: 'comment',
    content: content,
    position: {
      start: start,
      end: copyPosition(position)
    }
  });
}

function lexTag(state) {
  var str = state.str,
      position = state.position;

  {
    var secondChar = str.charAt(position.index + 1);
    var close = secondChar === '/';
    var start = copyPosition(position);
    feedPosition(position, str, close ? 2 : 1);
    state.tokens.push({ type: 'tag-start', close: close, position: { start: start } });
  }
  var tagName = lexTagName(state);
  lexTagAttributes(state);
  {
    var firstChar = str.charAt(position.index);
    var _close = firstChar === '/';
    feedPosition(position, str, _close ? 2 : 1);
    var end = copyPosition(position);
    state.tokens.push({ type: 'tag-end', close: _close, position: { end: end } });
  }
  return tagName;
}

// See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#special-white-space
var whitespace = /\s/;
function isWhitespaceChar(char) {
  return whitespace.test(char);
}

function lexTagName(state) {
  var str = state.str,
      position = state.position;

  var len = str.length;
  var start = position.index;
  while (start < len) {
    var char = str.charAt(start);
    var isTagChar = !(isWhitespaceChar(char) || char === '/' || char === '>');
    if (isTagChar) break;
    start++;
  }

  var end = start + 1;
  while (end < len) {
    var _char = str.charAt(end);
    var _isTagChar = !(isWhitespaceChar(_char) || _char === '/' || _char === '>');
    if (!_isTagChar) break;
    end++;
  }

  jumpPosition(position, str, end);
  var tagName = str.slice(start, end);
  state.tokens.push({
    type: 'tag',
    content: tagName
  });
  return tagName;
}

function lexTagAttributes(state) {
  var str = state.str,
      position = state.position,
      tokens = state.tokens;

  var cursor = position.index;
  var quote = null; // null, single-, or double-quote
  var wordBegin = cursor; // index of word start
  var words = []; // "key", "key=value", "key='value'", etc
  var len = str.length;
  while (cursor < len) {
    var char = str.charAt(cursor);
    if (quote) {
      var isQuoteEnd = char === quote;
      if (isQuoteEnd) {
        quote = null;
      }
      cursor++;
      continue;
    }

    var isTagEnd = char === '/' || char === '>';
    if (isTagEnd) {
      if (cursor !== wordBegin) {
        words.push(str.slice(wordBegin, cursor));
      }
      break;
    }

    var isWordEnd = isWhitespaceChar(char);
    if (isWordEnd) {
      if (cursor !== wordBegin) {
        words.push(str.slice(wordBegin, cursor));
      }
      wordBegin = cursor + 1;
      cursor++;
      continue;
    }

    var isQuoteStart = char === '\'' || char === '"';
    if (isQuoteStart) {
      quote = char;
      cursor++;
      continue;
    }

    cursor++;
  }
  jumpPosition(position, str, cursor);

  var wLen = words.length;
  var type = 'attribute';
  for (var i = 0; i < wLen; i++) {
    var word = words[i];
    var isNotPair = word.indexOf('=') === -1;
    if (isNotPair) {
      var secondWord = words[i + 1];
      if (secondWord && (0, compat.startsWith)(secondWord, '=')) {
        if (secondWord.length > 1) {
          var newWord = word + secondWord;
          tokens.push({ type: type, content: newWord });
          i += 1;
          continue;
        }
        var thirdWord = words[i + 2];
        i += 1;
        if (thirdWord) {
          var _newWord = word + '=' + thirdWord;
          tokens.push({ type: type, content: _newWord });
          i += 1;
          continue;
        }
      }
    }
    if ((0, compat.endsWith)(word, '=')) {
      var _secondWord = words[i + 1];
      if (_secondWord && !(0, compat.stringIncludes)(_secondWord, '=')) {
        var _newWord3 = word + _secondWord;
        tokens.push({ type: type, content: _newWord3 });
        i += 1;
        continue;
      }

      var _newWord2 = word.slice(0, -1);
      tokens.push({ type: type, content: _newWord2 });
      continue;
    }

    tokens.push({ type: type, content: word });
  }
}

var push = [].push;

function lexSkipTag(tagName, state) {
  var str = state.str,
      position = state.position,
      tokens = state.tokens;

  var safeTagName = tagName.toLowerCase();
  var len = str.length;
  var index = position.index;
  while (index < len) {
    var nextTag = str.indexOf('</', index);
    if (nextTag === -1) {
      lexText(state);
      break;
    }

    var tagStartPosition = copyPosition(position);
    jumpPosition(tagStartPosition, str, nextTag);
    var tagState = { str: str, position: tagStartPosition, tokens: [] };
    var name = lexTag(tagState);
    if (safeTagName !== name.toLowerCase()) {
      index = tagState.position.index;
      continue;
    }

    if (nextTag !== position.index) {
      var textStart = copyPosition(position);
      jumpPosition(position, str, nextTag);
      tokens.push({
        type: 'text',
        content: str.slice(textStart.index, nextTag),
        position: {
          start: textStart,
          end: copyPosition(position)
        }
      });
    }

    push.apply(tokens, tagState.tokens);
    jumpPosition(position, str, tagState.position.index);
    break;
  }
}

});

unwrapExports(lexer_1);
lexer_1.feedPosition;
lexer_1.jumpPosition;
lexer_1.makeInitialPosition;
lexer_1.copyPosition;
lexer_1.lex;
lexer_1.findTextEnd;
lexer_1.lexText;
lexer_1.lexComment;
lexer_1.lexTag;
lexer_1.isWhitespaceChar;
lexer_1.lexTagName;
lexer_1.lexTagAttributes;
lexer_1.lexSkipTag;

var parser_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parser;
exports.hasTerminalParent = hasTerminalParent;
exports.rewindStack = rewindStack;
exports.parse = parse;



function parser(tokens, options) {
  var root = { tagName: null, children: [] };
  var state = { tokens: tokens, options: options, cursor: 0, stack: [root] };
  parse(state);
  return root.children;
}

function hasTerminalParent(tagName, stack, terminals) {
  var tagParents = terminals[tagName];
  if (tagParents) {
    var currentIndex = stack.length - 1;
    while (currentIndex >= 0) {
      var parentTagName = stack[currentIndex].tagName;
      if (parentTagName === tagName) {
        break;
      }
      if ((0, compat.arrayIncludes)(tagParents, parentTagName)) {
        return true;
      }
      currentIndex--;
    }
  }
  return false;
}

function rewindStack(stack, newLength, childrenEndPosition, endPosition) {
  stack[newLength].position.end = endPosition;
  for (var i = newLength + 1, len = stack.length; i < len; i++) {
    stack[i].position.end = childrenEndPosition;
  }
  stack.splice(newLength);
}

function parse(state) {
  var tokens = state.tokens,
      options = state.options;
  var stack = state.stack;

  var nodes = stack[stack.length - 1].children;
  var len = tokens.length;
  var cursor = state.cursor;

  while (cursor < len) {
    var token = tokens[cursor];
    if (token.type !== 'tag-start') {
      nodes.push(token);
      cursor++;
      continue;
    }

    var tagToken = tokens[++cursor];
    cursor++;
    var tagName = tagToken.content.toLowerCase();
    if (token.close) {
      var index = stack.length;
      var shouldRewind = false;
      while (--index > -1) {
        if (stack[index].tagName === tagName) {
          shouldRewind = true;
          break;
        }
      }
      while (cursor < len) {
        var endToken = tokens[cursor];
        if (endToken.type !== 'tag-end') break;
        cursor++;
      }
      if (shouldRewind) {
        rewindStack(stack, index, token.position.start, tokens[cursor - 1].position.end);
        break;
      } else {
        continue;
      }
    }

    var isClosingTag = (0, compat.arrayIncludes)(options.closingTags, tagName);
    var shouldRewindToAutoClose = isClosingTag;
    if (shouldRewindToAutoClose) {
      var terminals = options.closingTagAncestorBreakers;

      shouldRewindToAutoClose = !hasTerminalParent(tagName, stack, terminals);
    }

    if (shouldRewindToAutoClose) {
      // rewind the stack to just above the previous
      // closing tag of the same name
      var currentIndex = stack.length - 1;
      while (currentIndex > 0) {
        if (tagName === stack[currentIndex].tagName) {
          rewindStack(stack, currentIndex, token.position.start, token.position.start);
          var previousIndex = currentIndex - 1;
          nodes = stack[previousIndex].children;
          break;
        }
        currentIndex = currentIndex - 1;
      }
    }

    var attributes = [];
    var attrToken = void 0;
    while (cursor < len) {
      attrToken = tokens[cursor];
      if (attrToken.type === 'tag-end') break;
      attributes.push(attrToken.content);
      cursor++;
    }

    cursor++;
    var children = [];
    var position = {
      start: token.position.start,
      end: attrToken.position.end
    };
    var elementNode = {
      type: 'element',
      tagName: tagToken.content,
      attributes: attributes,
      children: children,
      position: position
    };
    nodes.push(elementNode);

    var hasChildren = !(attrToken.close || (0, compat.arrayIncludes)(options.voidTags, tagName));
    if (hasChildren) {
      var size = stack.push({ tagName: tagName, children: children, position: position });
      var innerState = { tokens: tokens, options: options, cursor: cursor, stack: stack };
      parse(innerState);
      cursor = innerState.cursor;
      var rewoundInElement = stack.length === size;
      if (rewoundInElement) {
        elementNode.position.end = tokens[cursor - 1].position.end;
      }
    }
  }
  state.cursor = cursor;
}

});

unwrapExports(parser_1);
parser_1.hasTerminalParent;
parser_1.rewindStack;
parser_1.parse;

var format_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.splitHead = splitHead;
exports.unquote = unquote;
exports.format = format;
exports.formatAttributes = formatAttributes;
function splitHead(str, sep) {
  var idx = str.indexOf(sep);
  if (idx === -1) return [str];
  return [str.slice(0, idx), str.slice(idx + sep.length)];
}

function unquote(str) {
  var car = str.charAt(0);
  var end = str.length - 1;
  var isQuoteStart = car === '"' || car === "'";
  if (isQuoteStart && car === str.charAt(end)) {
    return str.slice(1, end);
  }
  return str;
}

function format(nodes, options) {
  return nodes.map(function (node) {
    var type = node.type;
    var outputNode = type === 'element' ? {
      type: type,
      tagName: node.tagName.toLowerCase(),
      attributes: formatAttributes(node.attributes),
      children: format(node.children, options)
    } : { type: type, content: node.content };
    if (options.includePositions) {
      outputNode.position = node.position;
    }
    return outputNode;
  });
}

function formatAttributes(attributes) {
  return attributes.map(function (attribute) {
    var parts = splitHead(attribute.trim(), '=');
    var key = parts[0];
    var value = typeof parts[1] === 'string' ? unquote(parts[1]) : null;
    return { key: key, value: value };
  });
}

});

unwrapExports(format_1);
format_1.splitHead;
format_1.unquote;
format_1.format;
format_1.formatAttributes;

var stringify = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.formatAttributes = formatAttributes;
exports.toHTML = toHTML;



function formatAttributes(attributes) {
  return attributes.reduce(function (attrs, attribute) {
    var key = attribute.key,
        value = attribute.value;

    if (value === null) {
      return attrs + ' ' + key;
    }
    var quoteEscape = value.indexOf('\'') !== -1;
    var quote = quoteEscape ? '"' : '\'';
    return attrs + ' ' + key + '=' + quote + value + quote;
  }, '');
}

function toHTML(tree, options) {
  return tree.map(function (node) {
    if (node.type === 'text') {
      return node.content;
    }
    if (node.type === 'comment') {
      return '<!--' + node.content + '-->';
    }
    var tagName = node.tagName,
        attributes = node.attributes,
        children = node.children;

    var isSelfClosing = (0, compat.arrayIncludes)(options.voidTags, tagName.toLowerCase());
    return isSelfClosing ? '<' + tagName + formatAttributes(attributes) + '>' : '<' + tagName + formatAttributes(attributes) + '>' + toHTML(children, options) + '</' + tagName + '>';
  }).join('');
}

exports.default = { toHTML: toHTML };

});

unwrapExports(stringify);
stringify.formatAttributes;
stringify.toHTML;

var tags = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
/*
  Tags which contain arbitary non-parsed content
  For example: <script> JavaScript should not be parsed
*/
exports.childlessTags = ['style', 'script', 'template'];

/*
  Tags which auto-close because they cannot be nested
  For example: <p>Outer<p>Inner is <p>Outer</p><p>Inner</p>
*/
exports.closingTags = ['html', 'head', 'body', 'p', 'dt', 'dd', 'li', 'option', 'thead', 'th', 'tbody', 'tr', 'td', 'tfoot', 'colgroup'];

/*
  Closing tags which have ancestor tags which
  may exist within them which prevent the
  closing tag from auto-closing.
  For example: in <li><ul><li></ul></li>,
  the top-level <li> should not auto-close.
*/
exports.closingTagAncestorBreakers = {
  li: ['ul', 'ol', 'menu'],
  dt: ['dl'],
  dd: ['dl'],
  tbody: ['table'],
  thead: ['table'],
  tfoot: ['table'],
  tr: ['table'],
  td: ['table']
};

/*
  Tags which do not need the closing tag
  For example: <img> does not need </img>
*/
exports.voidTags = ['!doctype', 'area', 'base', 'br', 'col', 'command', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'meta', 'param', 'source', 'track', 'wbr'];

});

unwrapExports(tags);
tags.childlessTags;
tags.closingTags;
tags.closingTagAncestorBreakers;
tags.voidTags;

var lib = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseDefaults = undefined;
exports.parse = parse;
exports.stringify = stringify$1;



var _lexer2 = _interopRequireDefault(lexer_1);



var _parser2 = _interopRequireDefault(parser_1);







function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var parseDefaults = exports.parseDefaults = {
  voidTags: tags.voidTags,
  closingTags: tags.closingTags,
  childlessTags: tags.childlessTags,
  closingTagAncestorBreakers: tags.closingTagAncestorBreakers,
  includePositions: false
};

function parse(str) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : parseDefaults;

  var tokens = (0, _lexer2.default)(str, options);
  var nodes = (0, _parser2.default)(tokens, options);
  return (0, format_1.format)(nodes, options);
}

function stringify$1(ast) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : parseDefaults;

  return (0, stringify.toHTML)(ast, options);
}

});

unwrapExports(lib);
lib.parseDefaults;
var lib_2 = lib.parse;
lib.stringify;

function isTagType(tag, type, name) {
    if (tag.type !== type) {
        return false;
    }
    if (name && tag.tagName !== name) {
        return false;
    }
    return true;
}
function extractComponentData(htmlString) {
    var html = lib_2(htmlString).find(function (element) { return isTagType(element, 'element', 'html'); });
    var body = html.children.find(function (element) { return isTagType(element, 'element', 'body'); });
    if (!body) {
        throw new Error('Cannot find the body tag. SpanishDict API might have changed');
    }
    var dataComponentFindFn = function (element) {
        var _a, _b;
        for (var _i = 0, _c = (_a = element.children) !== null && _a !== void 0 ? _a : []; _i < _c.length; _i++) {
            var child = _c[_i];
            if (isTagType(child, 'element', 'script') && ((_b = child.children) === null || _b === void 0 ? void 0 : _b.length)) {
                var grandResult = dataComponentFindFn(child);
                if (grandResult) { // find it
                    return grandResult;
                }
            }
            if (child.type === 'text' && child.content.includes('SD_COMPONENT_DATA')) {
                return child;
            }
        }
    };
    var resultTag = dataComponentFindFn(body);
    if (!resultTag) {
        throw new Error('Cannot find the tag with results. SpanishDict API might have changed');
    }
    var resultsLine = resultTag.content.split('\n').find(function (line) { return line.includes('SD_COMPONENT_DATA'); });
    return JSON.parse(resultsLine.substring(resultsLine.indexOf('=') + 1, resultsLine.length - 1));
}

function convertGender(gender) {
    if (gender === 'M') {
        return Gender.Masculine;
    }
    if (gender === 'F') {
        return Gender.Femeline;
    }
    return Gender.Neutral;
}
function convertExample(example, lang) {
    var originalKey = (lang === Language.Spanish ? "textEs" : "textEn");
    var translatedKey = (lang === Language.Spanish ? "textEn" : "textEs");
    return {
        original: example[originalKey],
        translated: example[translatedKey]
    };
}
function convertSense(sense, lang) {
    return sense.translations.map(function (translation) {
        var _a;
        return ({
            word: sense.subheadword,
            lang: lang,
            gender: sense.gender ? convertGender(sense.gender) : undefined,
            context: sense.context + (((_a = translation.contextEn) === null || _a === void 0 ? void 0 : _a.length) ? ", ".concat(translation.contextEn) : ''),
            meaning: translation.translation,
            part: sense.partOfSpeech.nameEn,
            examples: translation.examples.map(function (eg) { return convertExample(eg, lang); }),
            regions: sense.regions.concat(translation.regions).map(function (region) { return region.nameEn; })
        });
    });
}
function extract$1(html) {
    var _a;
    var resultsProps = extractComponentData(html).sdDictionaryResultsProps;
    var neodict = (_a = resultsProps === null || resultsProps === void 0 ? void 0 : resultsProps.entry) === null || _a === void 0 ? void 0 : _a.neodict;
    if (!(neodict === null || neodict === void 0 ? void 0 : neodict.length)) {
        throw new Error('Cannot find neodict. SpanishDict API might have changed');
    }
    return neodict
        .map(function (nd) { return nd.posGroups; }).reduce(function (acc, val) { return acc.concat(val); }, [])
        .map(function (posGroup) { return posGroup.senses; }).reduce(function (acc, val) { return acc.concat(val); }, [])
        .reduce(function (acc, val) { return acc.concat(convertSense(val, resultsProps.entryLang)); }, []);
}

/**
 * The same has happened to the tenses. Tense is used in their data structure for both
 * simple tenses and compound tenses. It also has the infomration of mood.
 * From SpanishDict, the tenses of the verb are a bit mixed up. For example,
 *
 *   presentIndicative = Present, Indicative
 *   preteritIndicative = Preterite, Indicative
 *   imperfectIndicative = Imperfect, Indicative
 *   conditionalIndicative = Conditional, Indicative
 *   presentSubjunctive = Present, Subjunctive
 *   imperfectSubjuncitve = Imperfect, Subjunctive
 *   imperfectSubjunctive2 = Imperfect2, Subjunctive
 *   futureSubjunctive = Future, Subjunctive
 *   imperative = Affirmative, Imperative
 *   negativeImperative = Negative, Imperative
 *   presentContinuous = Present, Continuous / Progressive (Compound)
 *   preteritContinuous = Preterite, Continuous / Progressive (Compound)
 *   imperfectContinuous = Imperfect, Continuous / Progressive (Compound)
 *   conditionalContinuous = Conditional, Continuous / Progressive (Compound)
 *   futureContinuous = Future, Continuous / Progressive (Compound)
 *   presentPerfect = Present, Perfect (compound tense)
 *   preteritPerfect = Preterite, Perfect (compound tense)
 *   pastPerfect = Past, Perfect (compound tense)
 *   conditionalPerfect = Conditional, Perfect (compound tense)
 *   futurePerfect = Future, Perfect (compound tense)
 *   presentPerfectSubjunctive = Present, Perfect Subjunctive (compound tense)
 *   pastPerfectSubjunctive = Past, Perfect Subjunctive (compound tense)
 *   futurePerfectSubjunctive = Future, Perfect Subjunctive (compound tense)
 */
function convertPronounToPerson(person) {
    if (person === 'yo' || person === 'nosotros') {
        return Person.First;
    }
    if (person === 'tú' || person === 'vosotros') {
        return Person.Second;
    }
    var thirdPersons = ['él', 'ella', 'Ud.', 'ellos', 'ellas', 'Uds.'];
    if (thirdPersons.some(function (p) { return person.includes(p); })) {
        return Person.Third;
    }
}
function convertPronounToNumber(person) {
    var singulars = ['yo', 'tú', 'él', 'ella', 'Ud.'];
    var plurals = ['nosotros', 'vosotros', 'ellos', 'ellas', 'Uds.'];
    if (singulars.some(function (singular) { return person.includes(singular); })) {
        return CNumber.Singular;
    }
    if (plurals.some(function (plural) { return person.includes(plural); })) {
        return CNumber.Plural;
    }
}
function convertParadigmToTense(tense) {
    var match = /[A-Z][^\d]*/.exec(tense);
    if (match) {
        tense = tense.substring(0, match.index) + tense.substring(match.index + match[0].length);
    }
    switch (tense) {
        case 'present':
            return Tense.Present;
        case 'preterit':
            return Tense.Preterite;
        case 'imperfect':
            return Tense.Imperfect;
        case 'imperfect2':
            return Tense.Imperfect2;
        case 'future':
            return Tense.Future;
        case 'imperative':
            return Tense.Affirmative;
        case 'negative':
            return Tense.Negative;
        case 'conditional':
            return Tense.Conditional;
        case 'past':
            return Tense.Past;
    }
    throw new Error("Unknown tense ".concat(tense));
}
function convertParadigmToMood(tense) {
    var lcTense = tense.toLowerCase();
    if (lcTense.includes('indicative')) {
        return Mood.Indicative;
    }
    if (lcTense.includes('subjunctive')) {
        return Mood.Subjunctive;
    }
    if (lcTense.includes('imperative')) {
        return Mood.Imperative;
    }
    return Mood.Indicative;
}
function convertParadigmToForm(tense) {
    if (tense.includes('Continuous')) {
        return Form.Progressive;
    }
    if (tense.includes('Perfect')) {
        return Form.Perfect;
    }
    return Form.Simple;
}
function convertParadigmToConjugationResults(paradigm, data) {
    return data.map(function (item) { return ({
        pronoun: item.pronoun,
        person: convertPronounToPerson(item.pronoun),
        number: convertPronounToNumber(item.pronoun),
        tense: convertParadigmToTense(paradigm),
        mood: convertParadigmToMood(paradigm),
        form: convertParadigmToForm(paradigm),
        paradigm: paradigm,
        word: item.word
    }); });
}
function extract(html) {
    var _a;
    var componentData = extractComponentData(html);
    if (!componentData.altLangUrl.includes('/verbos/')) {
        throw new Error('No conjugation found. Maybe it was not a verb?');
    }
    var paradigms = (_a = componentData.verb) === null || _a === void 0 ? void 0 : _a.paradigms;
    if (!paradigms) {
        throw new Error('Couldn\'t find paradigms in the component data. SpanishDict API might have changed');
    }
    var results = [];
    for (var paradigm in paradigms) {
        results = results.concat(convertParadigmToConjugationResults(paradigm, paradigms[paradigm]));
    }
    return results;
}

var browser = createCommonjsModule(function (module, exports) {

// ref: https://github.com/tc39/proposal-global
var getGlobal = function () {
	// the only reliable means to get the global object is
	// `Function('return this')()`
	// However, this causes CSP violations in Chrome apps.
	if (typeof self !== 'undefined') { return self; }
	if (typeof window !== 'undefined') { return window; }
	if (typeof global !== 'undefined') { return global; }
	throw new Error('unable to locate global object');
};

var global = getGlobal();

module.exports = exports = global.fetch;

// Needed for TypeScript and Webpack.
if (global.fetch) {
	exports.default = global.fetch.bind(global);
}

exports.Headers = global.Headers;
exports.Request = global.Request;
exports.Response = global.Response;
});
browser.Headers;
browser.Request;
browser.Response;

function translate(word) {
    return __awaiter(this, void 0, void 0, function () {
        var res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!word.length) {
                        return [2 /*return*/, Promise.reject(new Error('Zero-length word'))];
                    }
                    return [4 /*yield*/, browser("https://www.spanishdict.com/translate/".concat(word))];
                case 1:
                    res = _a.sent();
                    return [4 /*yield*/, res.text()];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
function conjugate(verb) {
    return __awaiter(this, void 0, void 0, function () {
        var res;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!verb.length) {
                        return [2 /*return*/, Promise.reject(new Error('Zero-length word'))];
                    }
                    return [4 /*yield*/, browser("https://www.spanishdict.com/conjugate/".concat(verb))];
                case 1:
                    res = _a.sent();
                    return [4 /*yield*/, res.text()];
                case 2: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
var request = {
    translate: translate,
    conjugate: conjugate
};

var index = {
    translate: function (word) { return __awaiter(void 0, void 0, void 0, function () { var _a; return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = extract$1;
                return [4 /*yield*/, request.translate(word)];
            case 1: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];
        }
    }); }); },
    conjugate: function (verb) { return __awaiter(void 0, void 0, void 0, function () { var _a; return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                _a = extract;
                return [4 /*yield*/, request.conjugate(verb)];
            case 1: return [2 /*return*/, _a.apply(void 0, [_b.sent()])];
        }
    }); }); }
};

export { index as default };
